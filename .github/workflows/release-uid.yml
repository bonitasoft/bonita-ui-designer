name: Release UID

on:
  workflow_dispatch:
    inputs:
      version:
        description: new version to release (keep --next-path to bump version)
        default: --next-patch
        required: true
      publishBinaries:
        description: true to Publish binaries
        required: true
        default: true
      pushToPublic:
        description: true to push on public repository
        required: true
        default: true
jobs:
  createGithubRelease:
    name: Create release
    runs-on: [self-hosted, uid-runner]
    steps:
      - name: Setup checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PERSONNAL_ACCES_TOKEN }}
          fetch-depth: 0
      - name: Get tag version
        id: newTagVersion
        shell: bash
        run: |
          if [ ${{ github.event.inputs.version }} = '--next-patch' ]
          then
              echo "##[set-output name=value;]$(echo $(./infrastructure/next-patch-version.sh))"
          else
              echo "##[set-output name=value;]$(echo ${{ github.event.inputs.version }})"
          fi
      - name: Config git
        run: |
          git config --local user.email "ui-designer-bot@users.noreply.github.com"
          git config --local user.name "ui-designer-bot"
          git config pull.rebase true

      - name: Update Version
        shell: bash
        run: |
          ./infrastructure/update-version.sh ${{ steps.newTagVersion.outputs.value }}
          git commit -a -m "other(${{ steps.newTagVersion.outputs.value }}) prepare release ${{ steps.newTagVersion.outputs.value }}" && git tag -a ${{ steps.newTagVersion.outputs.value}} -m "Release ${{ steps.newTagVersion.outputs.value }}"
          git push --tags
          echo "releaseDate=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Push public dev tag
        if: ${{ github.ref != 'refs/heads/master' && github.event.inputs.pushToPublic == 'true'}}
        shell: bash
        run: |
          git config remote.public.url >&- || git remote add public https://github.com/bonitasoft/bonita-ui-designer.git
          git push public ${{ steps.newTagVersion.outputs.value}}

      - name: Create Release
        uses: ncipollo/release-action@v1
        id: create_release
        with:
          tag: ${{ steps.newTagVersion.outputs.value }}
          name: Release ${{ steps.newTagVersion.outputs.value }}
          body: Release ${{ steps.newTagVersion.outputs.value }} (${{ env.releaseDate}})
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token

      # repository-dispatch event will call always on default branch ('dev' in our case)
      - name: Publish artefact
        if: ${{ success() && github.event.inputs.publishBinaries == 'true'}}
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_PERSONNAL_ACCES_TOKEN }}
          event-type: github-publish
          client-payload: '{"ref":"${{ github.ref }}", "releaseVersion": "${{ steps.newTagVersion.outputs.value }}"}'

      - name: Send message to Slack channel
        if: ${{ failure() }}
        uses: bonitasoft/actions/packages/notify-slack@v2.2.0
        with:
          CHANNEL_ID: ${{ secrets.SLACK_UID_CHANNEL_ID }}
          MESSAGE: ":x: :scream: UI-Designer release ${{ steps.newTagVersion.outputs.value }} failed."
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

